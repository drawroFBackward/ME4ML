{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Tutorial 4","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyO2/KrlfxlV3J4L3Xa2yHet"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"qqRPgYQ1QN7E","executionInfo":{"status":"ok","timestamp":1606092585791,"user_tz":0,"elapsed":1562,"user":{"displayName":"Aman Didwania","photoUrl":"","userId":"11937020715850323195"}},"outputId":"831610b7-d4f2-4b86-a037-a16ccf80c3ff"},"source":["import pandas\n","import numpy as np\n","\n","import matplotlib.pyplot as plt\n","\n","df = pandas.read_csv('http://pogo.software/me4ml/tensile_strength.csv')\n","\n","t = np.array(df['Temperature (deg C)'][:]) \n","s = np.array(df['Ultimate tensile strength (Pa)'][:])\n","\n","t_mean = np.mean(t)\n","t_std = np.std(t)\n","\n","s_mean = np.mean(s)\n","s_std = np.std(s)\n","\n","t_scale = (t-t_mean)/t_std\n","s_scale = (s-s_mean)/s_std\n","\n","fig, ax = plt.subplots() \n","plt.hist(s_scale) \n","plt.show()\n","\n"],"execution_count":1,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"rgu98UaZlR7J","executionInfo":{"status":"ok","timestamp":1606092664349,"user_tz":0,"elapsed":796,"user":{"displayName":"Aman Didwania","photoUrl":"","userId":"11937020715850323195"}},"outputId":"c374de6f-3c36-4ed4-a6df-98c19130db09"},"source":["scArray = np.array([[t_mean, s_mean],[t_std, s_std]]) \n","np.savetxt('scaleParams.txt',scArray)\n","\n","#download it from the Colab interface:\n","from google.colab import files \n","files.download('scaleParams.txt')"],"execution_count":2,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_3ea16b4a-858a-41f3-b3c5-6c11e00156f2\", \"scaleParams.txt\", 100)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":286},"id":"Zt_NBoUrntA3","executionInfo":{"status":"ok","timestamp":1606183969800,"user_tz":0,"elapsed":679,"user":{"displayName":"Aman Didwania","photoUrl":"","userId":"11937020715850323195"}},"outputId":"d2c454b5-1493-402d-dfe6-336f0a8438f8"},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","\n","\n","npx = 200\n","npy = 200\n","\n","x1line = np.linspace(0, 1, npx) \n","x2line = np.linspace(0, 1, npy)\n","\n","x1grid, x2grid = np.meshgrid(x1line, x2line) \n","\n","Xgrid = np.array([x1grid, x2grid]).reshape([2,npx*npy]).T\n","#Xgrid is all combinations of (xy), reshaped as 2 columns\n","\n","w = np.array([-1, -3]).reshape([1,2])\n","w0 = 1\n","g = np.matmul(w, Xgrid.T) + w0\n","\n","g = np.reshape(g, [npx, npy])\n","\n","yDiscr = (-x1line + 1) / 3\n","\n","fig, ax = plt.subplots()\n","plt.contourf(x1line, x2line, g)\n","plt.plot(x1line, yDiscr)\n","plt.colorbar()\n","plt.xlim(0, 1)\n","plt.ylim(0, 1)\n","\n","a1 = np.array([[1.3, -1, -3]])\n","a2 = np.array([[-2, 1, 2]])\n","a3 = np.array([[0.3, 0.1, -0.1]])\n","a4 = np.array([[0, -1, 1]])\n","a5 = np.array([[-0.2, 1.5, -1]])\n","\n","#Ygrid is defined as the same as Xgrid, except it has 1 \n","#at the beginning - this therefore adds a column of ones to the left\n","Ygrid = np.concatenate([np.ones([npx * npy,1]), Xgrid],axis=1) \n","\n","#calculate each of the five functions as before\n","g1 = np.matmul(a1, Ygrid.T) \n","g2 = np.matmul(a2, Ygrid.T) \n","g3 = np.matmul(a3, Ygrid.T) \n","g4 = np.matmul(a4, Ygrid.T) \n","g5 = np.matmul(a5, Ygrid.T)\n","#combine all five functions together\n","gconc = np.concatenate([g1, g2, g3, g4, g5])\n","\n","#define an array which will ultimately contain all of the class numbers\n","omega = np.zeros([1, npx * npy]) \n","\n","#from here on, its just the plotting since we know g1-5\n"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0.0, 1.0)"]},"metadata":{"tags":[]},"execution_count":12},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N6TAv3wH_ng3","executionInfo":{"status":"ok","timestamp":1606183701701,"user_tz":0,"elapsed":616,"user":{"displayName":"Aman Didwania","photoUrl":"","userId":"11937020715850323195"}},"outputId":"26ca41d3-190a-4ab9-96f9-3db9d17e6ef5"},"source":["import numpy as np\n","\n","\n","a = np.array([[1,2],[3,4]]);\n","b = a.reshape([4,1])\n","\n","print(a)\n","print(b)"],"execution_count":11,"outputs":[{"output_type":"stream","text":["[[1 2]\n"," [3 4]]\n","[[1]\n"," [2]\n"," [3]\n"," [4]]\n"],"name":"stdout"}]}]}